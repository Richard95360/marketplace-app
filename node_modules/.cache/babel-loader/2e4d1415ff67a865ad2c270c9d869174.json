{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { addUser, getUser } from '../../service';\nimport { app } from '../../service/mongoDB-sdk';\nimport { handleLogin, handleLogout, handleAuthenticationErrors } from '../../state/actions/authentication';\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    const userProfile = { ...newUser,\n      password: undefined,\n      confirm_password: undefined\n    };\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        app.logIn(credentials).then(user => {\n          addUser(userProfile);\n          dispatch(handleLogin(userProfile));\n          resolve(user);\n        });\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleUserLogout() {\n    var _app$currentUser;\n\n    console.log(app.currentUser);\n    (_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut().then(() => console.log(\"user successfully log out\")).catch(err => console.log(err));\n  }\n\n  async function handleUserLogin(email, password) {\n    return new Promise(resolve => {\n      app.logIn(Realm.Credentials.emailPassword(email, password)).then(async () => {\n        //verify user profile\n        const currentUser = await app.currentUser; // retrieve user profile\n\n        getUser(currentUser).then(userProfile => {\n          dispatch(handleLogin(userProfile));\n          resolve(userProfile);\n        });\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleAuthentication() {\n    const currentUser = await app.currentUser;\n    dispatch(handleLogin(currentUser));\n    getUser(currentUser === null || currentUser === void 0 ? void 0 : currentUser.email).then(userProfile => !!currentUser && dispatch(handleLogin(userProfile))).catch(err => dispatch(handleAuthenticationErrors(err)));\n  }\n\n  return {\n    handleUserRegistration,\n    handleUserLogout,\n    handleUserLogin,\n    handleAuthentication\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["/media/haddad/6a8a543b-c57b-47b0-a06e-396959f42841/sandra-udemy/marketplace/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","addUser","getUser","app","handleLogin","handleLogout","handleAuthenticationErrors","useAuthentication","dispatch","handleUserRegistration","newUser","userProfile","password","undefined","confirm_password","Promise","resolve","emailPasswordAuth","registerUser","email","then","credentials","Credentials","emailPassword","logIn","user","catch","err","handleUserLogout","console","log","currentUser","logOut","handleUserLogin","handleAuthentication"],"mappings":"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","sourcesContent":["import * as Realm from \"realm-web\";\nimport {addUser, getUser} from '../../service';\nimport {app} from '../../service/mongoDB-sdk';\nimport {\n    handleLogin,\n    handleLogout,\n    handleAuthenticationErrors\n} from '../../state/actions/authentication'\n\nconst useAuthentication =  (dispatch) => {\n    function handleUserRegistration(newUser) {\n        const userProfile= {\n           ...newUser,\n           password: undefined,\n           confirm_password: undefined,\n        }\n        return new Promise((resolve) => {\n            app.emailPasswordAuth\n            .registerUser(newUser.email, newUser.password)\n            .then(() => {\n              const credentials = Realm.Credentials.emailPassword(\n                  newUser.email, \n                  newUser.password\n                  );\n                app.logIn(credentials).then((user) => {\n                    addUser(userProfile);\n                    dispatch(handleLogin(userProfile));\n                    resolve(user);\n                });\n            })\n            .catch(err => dispatch(handleAuthenticationErrors(err)));\n        });\n    }\n    async function handleUserLogout() {\n        console.log(app.currentUser);\n        app.currentUser\n        ?.logOut()\n        .then(() => console.log(\"user successfully log out\"))\n        .catch((err) => console.log(err));\n    }\nasync function handleUserLogin(email, password) {\n return new Promise((resolve) => {\n     app\n     .logIn(Realm.Credentials.emailPassword(email, password))\n     .then(async () => {\n         //verify user profile\n         const currentUser = await app.currentUser;\n        \n         // retrieve user profile\n            getUser(currentUser).then(userProfile => {\n             dispatch(handleLogin(userProfile));\n             resolve(userProfile);\n         });\n     })\n     .catch((err) =>dispatch(handleAuthenticationErrors(err)));\n });\n}\n\nasync function handleAuthentication() {\n    const currentUser = await app.currentUser;\n    dispatch(handleLogin(currentUser));\n    getUser(currentUser?.email)\n    .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\n   .catch(err => dispatch(handleAuthenticationErrors(err)))\n}\n    return {\n        handleUserRegistration,\n        handleUserLogout,\n        handleUserLogin,\n        handleAuthentication\n    };\n};\n\nexport default useAuthentication;"]},"metadata":{},"sourceType":"module"}