{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { app } from '../../service/mongoDB-sdk';\nimport { handleLogin, handleLogout, handleAuthenticationErrors } from '../../state/actions/authentication';\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        app.logIn(credentials).then(user => {\n          resolve(user);\n          dispatch(handleLogin(newUser));\n        });\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleUserLogout() {\n    var _app$currentUser;\n\n    (_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut().then(() => {\n      console.log(\"user successfully log out\");\n    }).catch(err => log);\n  }\n\n  return {\n    handleUserRegistration\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["/media/haddad/6a8a543b-c57b-47b0-a06e-396959f42841/sandra-udemy/marketplace/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","app","handleLogin","handleLogout","handleAuthenticationErrors","useAuthentication","dispatch","handleUserRegistration","newUser","Promise","resolve","emailPasswordAuth","registerUser","email","password","then","credentials","Credentials","emailPassword","logIn","user","catch","err","handleUserLogout","currentUser","logOut","console","log"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AACA,SAAQC,GAAR,QAAkB,2BAAlB;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,0BAHJ,QAIO,oCAJP;;AAMA,MAAMC,iBAAiB,GAAKC,QAAD,IAAc;AACrC,WAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AACrC,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5BT,MAAAA,GAAG,CAACU,iBAAJ,CACCC,YADD,CACcJ,OAAO,CAACK,KADtB,EAC6BL,OAAO,CAACM,QADrC,EAECC,IAFD,CAEM,MAAM;AACV,cAAMC,WAAW,GAAGhB,KAAK,CAACiB,WAAN,CAAkBC,aAAlB,CAChBV,OAAO,CAACK,KADQ,EAEhBL,OAAO,CAACM,QAFQ,CAApB;AAKEb,QAAAA,GAAG,CAACkB,KAAJ,CAAUH,WAAV,EAAuBD,IAAvB,CAA6BK,IAAD,IAAU;AAClCV,UAAAA,OAAO,CAACU,IAAD,CAAP;AACAd,UAAAA,QAAQ,CAACJ,WAAW,CAACM,OAAD,CAAZ,CAAR;AAEH,SAJD;AAKH,OAbD,EAcCa,KAdD,CAcOC,GAAG,IAAIhB,QAAQ,CAACF,0BAA0B,CAACkB,GAAD,CAA3B,CAdtB;AAeH,KAhBM,CAAP;AAiBH;;AACD,iBAAeC,gBAAf,GAAkC;AAAA;;AAC9B,wBAAAtB,GAAG,CAACuB,WAAJ,sEACEC,MADF,GAECV,IAFD,CAEM,MAAM;AACRW,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,KAJD,EAKCN,KALD,CAKQC,GAAD,IAASK,GALhB;AAMH;;AACD,SAAO;AACHpB,IAAAA;AADG,GAAP;AAGH,CA/BD;;AAiCA,eAAeF,iBAAf","sourcesContent":["import * as Realm from \"realm-web\";\nimport {app} from '../../service/mongoDB-sdk';\nimport {\n    handleLogin,\n    handleLogout,\n    handleAuthenticationErrors\n} from '../../state/actions/authentication'\n\nconst useAuthentication =  (dispatch) => {\n    function handleUserRegistration(newUser) {\n        return new Promise((resolve) => {\n            app.emailPasswordAuth\n            .registerUser(newUser.email, newUser.password)\n            .then(() => {\n              const credentials = Realm.Credentials.emailPassword(\n                  newUser.email, \n                  newUser.password\n                  );\n                  \n                app.logIn(credentials).then((user) => {\n                    resolve(user);\n                    dispatch(handleLogin(newUser));\n                   \n                });\n            })\n            .catch(err => dispatch(handleAuthenticationErrors(err)));\n        });\n    }\n    async function handleUserLogout() {\n        app.currentUser\n        ?.logOut()\n        .then(() => {\n            console.log(\"user successfully log out\");\n        })\n        .catch((err) => log)\n    }\n    return {\n        handleUserRegistration,\n    };\n};\n\nexport default useAuthentication;"]},"metadata":{},"sourceType":"module"}