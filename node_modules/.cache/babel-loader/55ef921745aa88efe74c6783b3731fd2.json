{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { addUser } from '../../service';\nimport { app } from '../../service/mongoDB-sdk';\nimport { handleLogin, handleLogout, handleAuthenticationErrors } from '../../state/actions/authentication';\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(newUser) {\n    const userProfile = { ...u\n    };\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(newUser.email, newUser.password).then(() => {\n        const credentials = Realm.Credentials.emailPassword(newUser.email, newUser.password);\n        app.logIn(credentials).then(user => {\n          addUser(userProfile);\n          resolve(user);\n          dispatch(handleLogin(newUser));\n        });\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleUserLogout() {\n    var _app$currentUser;\n\n    console.log(app.currentUser);\n    (_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut().then(() => console.log(\"user successfully log out\")).catch(err => console.log(err));\n  }\n\n  async function handleUserLogin(email, password) {\n    return new Promise(resolve => {\n      app.logIn(Realm.Credentials.emailPassword(email, password)).then(async () => {\n        //verify user profile\n        const currentUser = await app.currentUser;\n        resolve(currentUser);\n        dispatch(handleLogin(currentUser)); // retrieve user profile\n        // getUser(currentUser.email)\n        // .then(userProfile => {\n        //   dispatch(handleLogin(userProfile))\n        //  resolve(currentUser)\n        // })\n      }).catch(err => dispatch(handleAuthenticationErrors(err)));\n    });\n  }\n\n  async function handleAuthentication() {\n    const currentUser = await app.currentUser;\n    dispatch(handleLogin(currentUser)); // getUser(currentUser?.email)\n    // .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\n    // .catch(err => dispatch(handleAuthenticationErrors(err)))\n  }\n\n  return {\n    handleUserRegistration,\n    handleUserLogout,\n    handleUserLogin,\n    handleAuthentication\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["/media/haddad/6a8a543b-c57b-47b0-a06e-396959f42841/sandra-udemy/marketplace/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","addUser","app","handleLogin","handleLogout","handleAuthenticationErrors","useAuthentication","dispatch","handleUserRegistration","newUser","userProfile","u","Promise","resolve","emailPasswordAuth","registerUser","email","password","then","credentials","Credentials","emailPassword","logIn","user","catch","err","handleUserLogout","console","log","currentUser","logOut","handleUserLogin","handleAuthentication"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AACA,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAAQC,GAAR,QAAkB,2BAAlB;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,0BAHJ,QAIO,oCAJP;;AAMA,MAAMC,iBAAiB,GAAKC,QAAD,IAAc;AACrC,WAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AACrC,UAAMC,WAAW,GAAE,EAChB,GAAGC;AADa,KAAnB;AAGA,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5BX,MAAAA,GAAG,CAACY,iBAAJ,CACCC,YADD,CACcN,OAAO,CAACO,KADtB,EAC6BP,OAAO,CAACQ,QADrC,EAECC,IAFD,CAEM,MAAM;AACV,cAAMC,WAAW,GAAGnB,KAAK,CAACoB,WAAN,CAAkBC,aAAlB,CAChBZ,OAAO,CAACO,KADQ,EAEhBP,OAAO,CAACQ,QAFQ,CAApB;AAIEf,QAAAA,GAAG,CAACoB,KAAJ,CAAUH,WAAV,EAAuBD,IAAvB,CAA6BK,IAAD,IAAU;AAClCtB,UAAAA,OAAO,CAACS,WAAD,CAAP;AACAG,UAAAA,OAAO,CAACU,IAAD,CAAP;AACAhB,UAAAA,QAAQ,CAACJ,WAAW,CAACM,OAAD,CAAZ,CAAR;AACH,SAJD;AAKH,OAZD,EAaCe,KAbD,CAaOC,GAAG,IAAIlB,QAAQ,CAACF,0BAA0B,CAACoB,GAAD,CAA3B,CAbtB;AAcH,KAfM,CAAP;AAgBH;;AACD,iBAAeC,gBAAf,GAAkC;AAAA;;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY1B,GAAG,CAAC2B,WAAhB;AACA,wBAAA3B,GAAG,CAAC2B,WAAJ,sEACEC,MADF,GAECZ,IAFD,CAEM,MAAMS,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAFZ,EAGCJ,KAHD,CAGQC,GAAD,IAASE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAHhB;AAIH;;AACL,iBAAeM,eAAf,CAA+Bf,KAA/B,EAAsCC,QAAtC,EAAgD;AAC/C,WAAO,IAAIL,OAAJ,CAAaC,OAAD,IAAa;AAC5BX,MAAAA,GAAG,CACFoB,KADD,CACOtB,KAAK,CAACoB,WAAN,CAAkBC,aAAlB,CAAgCL,KAAhC,EAAuCC,QAAvC,CADP,EAECC,IAFD,CAEM,YAAY;AACd;AACA,cAAMW,WAAW,GAAG,MAAM3B,GAAG,CAAC2B,WAA9B;AACAhB,QAAAA,OAAO,CAACgB,WAAD,CAAP;AACAtB,QAAAA,QAAQ,CAACJ,WAAW,CAAC0B,WAAD,CAAZ,CAAR,CAJc,CAKd;AACD;AACA;AACE;AACC;AACH;AACF,OAbD,EAcCL,KAdD,CAcQC,GAAD,IAAQlB,QAAQ,CAACF,0BAA0B,CAACoB,GAAD,CAA3B,CAdvB;AAeH,KAhBM,CAAP;AAiBA;;AAED,iBAAeO,oBAAf,GAAsC;AAClC,UAAMH,WAAW,GAAG,MAAM3B,GAAG,CAAC2B,WAA9B;AACAtB,IAAAA,QAAQ,CAACJ,WAAW,CAAC0B,WAAD,CAAZ,CAAR,CAFkC,CAGnC;AACA;AACA;AACF;;AACG,SAAO;AACHrB,IAAAA,sBADG;AAEHkB,IAAAA,gBAFG;AAGHK,IAAAA,eAHG;AAIHC,IAAAA;AAJG,GAAP;AAMH,CA9DD;;AAgEA,eAAe1B,iBAAf","sourcesContent":["import * as Realm from \"realm-web\";\nimport {addUser} from '../../service';\nimport {app} from '../../service/mongoDB-sdk';\nimport {\n    handleLogin,\n    handleLogout,\n    handleAuthenticationErrors\n} from '../../state/actions/authentication'\n\nconst useAuthentication =  (dispatch) => {\n    function handleUserRegistration(newUser) {\n        const userProfile= {\n           ...u\n        }\n        return new Promise((resolve) => {\n            app.emailPasswordAuth\n            .registerUser(newUser.email, newUser.password)\n            .then(() => {\n              const credentials = Realm.Credentials.emailPassword(\n                  newUser.email, \n                  newUser.password\n                  );\n                app.logIn(credentials).then((user) => {\n                    addUser(userProfile);\n                    resolve(user);\n                    dispatch(handleLogin(newUser));\n                });\n            })\n            .catch(err => dispatch(handleAuthenticationErrors(err)));\n        });\n    }\n    async function handleUserLogout() {\n        console.log(app.currentUser);\n        app.currentUser\n        ?.logOut()\n        .then(() => console.log(\"user successfully log out\"))\n        .catch((err) => console.log(err));\n    }\nasync function handleUserLogin(email, password) {\n return new Promise((resolve) => {\n     app\n     .logIn(Realm.Credentials.emailPassword(email, password))\n     .then(async () => {\n         //verify user profile\n         const currentUser = await app.currentUser;\n         resolve(currentUser);\n         dispatch(handleLogin(currentUser));\n         // retrieve user profile\n        // getUser(currentUser.email)\n        // .then(userProfile => {\n          //   dispatch(handleLogin(userProfile))\n           //  resolve(currentUser)\n        // })\n     })\n     .catch((err) =>dispatch(handleAuthenticationErrors(err)));\n });\n}\n\nasync function handleAuthentication() {\n    const currentUser = await app.currentUser;\n    dispatch(handleLogin(currentUser));\n   // getUser(currentUser?.email)\n   // .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\n   // .catch(err => dispatch(handleAuthenticationErrors(err)))\n}\n    return {\n        handleUserRegistration,\n        handleUserLogout,\n        handleUserLogin,\n        handleAuthentication\n    };\n};\n\nexport default useAuthentication;"]},"metadata":{},"sourceType":"module"}